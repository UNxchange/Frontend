"""
Versi√≥n mejorada de la prueba que maneja correctamente los campos por ID
"""
import pytest
import time
import requests
from datetime import datetime
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
from chrome_config import custom_config

def fill_form_field_by_id(driver, field_id, field_value, field_type='text'):
    """
    Llena un campo del formulario usando su ID
    """
    try:
        if field_type == 'select':
            select_element = driver.find_element(By.ID, field_id)
            select = Select(select_element)
            
            # Intentar seleccionar por texto visible
            try:
                select.select_by_visible_text(field_value)
                print(f"‚úÖ {field_id}: Seleccionado '{field_value}' por texto")
                return True
            except:
                # Intentar seleccionar por valor
                try:
                    select.select_by_value(field_value)
                    print(f"‚úÖ {field_id}: Seleccionado '{field_value}' por valor")
                    return True
                except:
                    print(f"‚ö†Ô∏è {field_id}: No se pudo seleccionar '{field_value}'")
                    return False
        
        elif field_type == 'readonly':
            # Para campos de solo lectura, verificar que tienen el valor esperado
            field_element = driver.find_element(By.ID, field_id)
            current_value = field_element.get_attribute('value') or field_element.get_attribute('placeholder')
            print(f"‚ÑπÔ∏è {field_id}: Campo de solo lectura con valor '{current_value}'")
            return True
            
        else:
            # Para campos input normales
            field_element = driver.find_element(By.ID, field_id)
            if field_element.is_enabled():
                field_element.clear()
                field_element.send_keys(field_value)
                print(f"‚úÖ {field_id}: Ingresado '{field_value}'")
                return True
            else:
                current_value = field_element.get_attribute('value') or field_element.get_attribute('placeholder')
                print(f"‚ÑπÔ∏è {field_id}: Campo deshabilitado con valor '{current_value}'")
                return True
        
    except NoSuchElementException:
        print(f"‚ùå {field_id}: Campo no encontrado")
        return False
    except Exception as e:
        print(f"‚ùå {field_id}: Error - {e}")
        return False

def test_improved_convocatoria_creation(driver):
    """
    Prueba mejorada que usa IDs espec√≠ficos detectados en el formulario
    """
    print("\n" + "="*80)
    print("üß™ PRUEBA MEJORADA: CREACI√ìN DE CONVOCATORIA CON IDS CORRECTOS")
    print("="*80)
    
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    
    # Datos ajustados basados en la estructura real del formulario
    form_fields = [
        {'id': 'subscriptionYear', 'value': '2024', 'type': 'readonly'},
        {'id': 'country', 'value': 'Alemania', 'type': 'readonly'},
        {'id': 'institution', 'value': f'Universidad Selenium Test {timestamp}', 'type': 'text'},
        {'id': 'agreementType', 'value': 'Intercambio', 'type': 'select'},
        {'id': 'state', 'value': 'Vigente', 'type': 'select'},
        {'id': 'validity', 'value': 'December - 2024', 'type': 'text'},
        {'id': 'subscriptionLevel', 'value': 'Universidad Nacional de Colombia', 'type': 'text'},
        {'id': 'dreLink', 'value': 'https://example.com/dre-test', 'type': 'text'},
        {'id': 'agreementLink', 'value': 'https://example.com/agreement-test', 'type': 'text'},
        {'id': 'internationalLink', 'value': 'https://example.com/international-test', 'type': 'text'},
        {'id': 'Props', 'value': f'Prueba automatizada de integraci√≥n Selenium - {timestamp}', 'type': 'textarea'}
    ]
    
    print(f"üìã Preparando datos con timestamp: {timestamp}")
    
    try:
        # === LOGIN R√ÅPIDO ===
        print(f"\nüöÄ Login...")
        login_url = f"{custom_config.FRONTEND_URL}/login"
        driver.get(login_url)
        time.sleep(3)
        
        email_field = driver.find_element(By.CSS_SELECTOR, "input[type='text'], input[type='email']")
        password_field = driver.find_element(By.CSS_SELECTOR, "input[type='password']")
        email_field.send_keys(custom_config.TEST_USER_EMAIL)
        password_field.send_keys(custom_config.TEST_USER_PASSWORD)
        
        login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit'], button")
        login_button.click()
        time.sleep(5)
        
        # Cerrar popups
        try:
            driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
        except:
            pass
        
        print(f"‚úÖ Login exitoso")
        
        # === ABRIR FORMULARIO ===
        print(f"\nüîò Abriendo formulario...")
        create_button = driver.find_element(By.CSS_SELECTOR, "button.action-button.primary")
        driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", create_button)
        time.sleep(1)
        create_button.click()
        time.sleep(4)
        
        driver.save_screenshot("reports/screenshots/improved_01_form_opened.png")
        print(f"‚úÖ Formulario abierto")
        
        # === LLENAR CAMPOS POR ID ===
        print(f"\nüìù Llenando formulario...")
        
        fields_completed = 0
        for field in form_fields:
            print(f"\nüîß Campo: {field['id']}")
            success = fill_form_field_by_id(driver, field['id'], field['value'], field['type'])
            if success:
                fields_completed += 1
            time.sleep(0.8)  # Pausa m√°s larga para estabilidad
        
        print(f"\nüìä Campos completados: {fields_completed}/{len(form_fields)}")
        
        # === SELECCIONAR IDIOMAS ===
        print(f"\nüåê Seleccionando idiomas...")
        
        # Los checkboxes est√°n sin ID, buscarlos por posici√≥n o valor
        checkboxes = driver.find_elements(By.CSS_SELECTOR, "input[type='checkbox']")
        languages_selected = 0
        
        for i, checkbox in enumerate(checkboxes[:2]):  # Seleccionar los primeros 2
            try:
                if checkbox.is_displayed() and not checkbox.is_selected():
                    driver.execute_script("arguments[0].scrollIntoView(true);", checkbox)
                    time.sleep(0.5)
                    checkbox.click()
                    languages_selected += 1
                    print(f"‚úÖ Idioma {i+1} seleccionado")
                    time.sleep(0.5)
            except Exception as e:
                print(f"‚ö†Ô∏è Error seleccionando idioma {i+1}: {e}")
        
        print(f"‚úÖ {languages_selected} idiomas seleccionados")
        
        # === SCREENSHOT ANTES DEL ENV√çO ===
        driver.save_screenshot("reports/screenshots/improved_02_form_filled.png")
        
        # === ENVIAR FORMULARIO ===
        print(f"\nüì§ Enviando formulario...")
        
        submit_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit']")
        print(f"Bot√≥n encontrado: '{submit_button.text}'")
        
        # Scroll al bot√≥n
        driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", submit_button)
        time.sleep(2)
        
        # Enviar
        submit_button.click()
        print(f"‚úÖ Formulario enviado")
        
        # === VERIFICAR RESULTADO ===
        print(f"\n‚è≥ Verificando resultado...")
        time.sleep(6)  # Esperar m√°s tiempo para procesar
        
        driver.save_screenshot("reports/screenshots/improved_03_after_submit.png")
        
        final_url = driver.current_url
        print(f"üåê URL final: {final_url}")
        
        # Buscar mensajes en la p√°gina
        page_text = driver.find_element(By.TAG_NAME, "body").text.lower()
        
        success_keywords = ['√©xito', 'exitosa', 'creada', 'guardada', 'success']
        error_keywords = ['error', 'fall√≥', 'failed', 'invalid']
        
        success_found = any(keyword in page_text for keyword in success_keywords)
        error_found = any(keyword in page_text for keyword in error_keywords)
        
        print(f"üìÑ An√°lisis de la p√°gina:")
        if success_found:
            print(f"‚úÖ Indicadores de √©xito detectados")
        if error_found:
            print(f"‚ùå Indicadores de error detectados")
        
        # === VERIFICAR EN BACKEND ===
        print(f"\nüîç Verificando en backend...")
        
        test_institution = form_fields[2]['value']  # institution
        
        try:
            response = requests.get(custom_config.CONVOCATORIAS_ENDPOINT, timeout=10)
            if response.status_code == 200:
                convocatorias = response.json()
                print(f"üìä Convocatorias en backend: {len(convocatorias)}")
                
                # Buscar nuestra convocatoria
                found = False
                for conv in convocatorias:
                    if conv.get('institution') == test_institution:
                        print(f"üéâ ¬°CONVOCATORIA ENCONTRADA EN BACKEND!")
                        print(f"   ID: {conv.get('id')}")
                        print(f"   Instituci√≥n: {conv.get('institution')}")
                        print(f"   Pa√≠s: {conv.get('country')}")
                        print(f"   Estado: {conv.get('state')}")
                        found = True
                        break
                
                if not found:
                    print(f"‚ö†Ô∏è Convocatoria no encontrada a√∫n")
                    print(f"   Buscando: {test_institution}")
                    # Mostrar las √∫ltimas 3 convocatorias para comparar
                    print(f"üìã √öltimas convocatorias:")
                    for conv in convocatorias[-3:]:
                        print(f"   - {conv.get('institution', 'Sin nombre')}")
                
                success_found = success_found or found
                
        except Exception as e:
            print(f"‚ö†Ô∏è Error consultando backend: {e}")
        
        # === RESULTADO FINAL ===
        print(f"\n" + "="*80)
        if success_found:
            print("üéâ ¬°PRUEBA DE INTEGRACI√ìN EXITOSA!")
        elif error_found:
            print("‚ùå PRUEBA FALL√ì - SE DETECTARON ERRORES")
        else:
            print("ü§î RESULTADO INCIERTO - NO HAY INDICADORES CLAROS")
        
        print(f"üìä Resumen:")
        print(f"   ‚Ä¢ Campos llenados: {fields_completed}/{len(form_fields)}")
        print(f"   ‚Ä¢ Idiomas seleccionados: {languages_selected}")
        print(f"   ‚Ä¢ Formulario enviado: ‚úÖ")
        print(f"   ‚Ä¢ Verificaci√≥n backend: {'‚úÖ' if success_found else '‚ö†Ô∏è'}")
        print("="*80)
        
        return success_found
        
    except Exception as e:
        print(f"\n‚ùå Error en la prueba: {e}")
        driver.save_screenshot("reports/screenshots/improved_99_error.png")
        raise

if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
