"""
Prueba de integraci√≥n completa y final con todos los campos corregidos
"""
import pytest
import time
import requests
from datetime import datetime
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
from chrome_config import custom_config

def test_complete_integration_final(driver):
    """
    Prueba de integraci√≥n completa: Login ‚Üí Crear Convocatoria ‚Üí Verificar Backend
    Versi√≥n final con todos los campos corregidos
    """
    print("\n" + "="*80)
    print("üß™ PRUEBA DE INTEGRACI√ìN COMPLETA - VERSI√ìN FINAL")
    print("="*80)
    
    email = custom_config.TEST_USER_EMAIL
    password = custom_config.TEST_USER_PASSWORD
    
    # Datos de prueba con timestamp √∫nico
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    test_data = {
        "subscriptionYear": "2024",
        "country": "Alemania", 
        "institution": f"Universidad Prueba Final {timestamp}",
        "agreementType": "Intercambio",
        "validity": "December - 2024",
        "state": "Vigente",
        "subscriptionLevel": "Universidad Nacional de Colombia",
        "languages": ["Espa√±ol", "Alem√°n"],
        "dreLink": f"https://ejemplo.com/dre/{timestamp}",
        "agreementLink": f"https://ejemplo.com/agreement/{timestamp}",
        "Props": f"Prueba de integraci√≥n completa - {timestamp}",
        "internationalLink": f"https://ejemplo.com/international/{timestamp}"
    }
    
    print(f"üìã Datos de prueba generados:")
    for key, value in test_data.items():
        print(f"   {key}: {value}")
    
    try:
        # === VERIFICAR ESTADO INICIAL DEL BACKEND ===
        print(f"\nüìä Verificando estado inicial del backend...")
        try:
            response = requests.get(custom_config.CONVOCATORIAS_ENDPOINT, timeout=10)
            initial_count = len(response.json()) if response.status_code == 200 else 0
            print(f"‚úÖ Convocatorias iniciales en backend: {initial_count}")
        except:
            initial_count = 0
            print("‚ö†Ô∏è No se pudo verificar estado inicial del backend")
        
        # === PASO 1: LOGIN ===
        print(f"\nüöÄ Paso 1: Login...")
        login_url = f"{custom_config.FRONTEND_URL}/login"
        driver.get(login_url)
        time.sleep(2)
        
        # Login
        email_field = driver.find_element(By.CSS_SELECTOR, "input[type='text'], input[type='email']")
        password_field = driver.find_element(By.CSS_SELECTOR, "input[type='password']")
        email_field.send_keys(email)
        password_field.send_keys(password)
        
        login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit'], button")
        login_button.click()
        time.sleep(5)
        
        # Cerrar popups
        try:
            driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
        except:
            pass
        
        current_url = driver.current_url
        if "/dashboard" not in current_url:
            raise AssertionError(f"Login fall√≥ - URL: {current_url}")
        
        print(f"‚úÖ Login exitoso - Dashboard cargado")
        driver.save_screenshot("reports/screenshots/final_01_login_success.png")
        
        # === PASO 2: ABRIR FORMULARIO ===
        print(f"\nüîò Paso 2: Abriendo formulario de convocatoria...")
        create_button = driver.find_element(By.CSS_SELECTOR, "button.action-button.primary")
        create_button.click()
        time.sleep(3)
        
        print(f"‚úÖ Formulario abierto")
        driver.save_screenshot("reports/screenshots/final_02_form_opened.png")
        
        # === PASO 3: LLENAR FORMULARIO COMPLETO ===
        print(f"\nüìù Paso 3: Llenando formulario completo...")
        
        fields_filled = 0
        total_fields = len(test_data) - 1  # -1 porque languages se maneja separado
        
        # 1. A√±o de suscripci√≥n * (corregido)
        try:
            year_field = driver.find_element(By.ID, "subscriptionYear")
            year_field.clear()
            year_field.send_keys(test_data["subscriptionYear"])
            print(f"‚úÖ subscriptionYear: {test_data['subscriptionYear']}")
            fields_filled += 1
        except Exception as e:
            print(f"‚ùå subscriptionYear fall√≥: {e}")
        
        # 2. Pa√≠s * (corregido)
        try:
            country_field = driver.find_element(By.ID, "country")
            country_field.clear()
            country_field.send_keys(test_data["country"])
            print(f"‚úÖ country: {test_data['country']}")
            fields_filled += 1
        except Exception as e:
            print(f"‚ùå country fall√≥: {e}")
        
        # 3. Resto de campos
        field_mappings = {
            "institution": "institution",
            "agreementType": "agreementType", 
            "validity": "validity",
            "state": "state",
            "subscriptionLevel": "subscriptionLevel",
            "dreLink": "dreLink",
            "agreementLink": "agreementLink",
            "Props": "Props",
            "internationalLink": "internationalLink"
        }
        
        for field_key, field_id in field_mappings.items():
            try:
                # Buscar por ID primero
                field = driver.find_element(By.ID, field_id)
                
                if field.tag_name == "select":
                    # Es un select
                    select_obj = Select(field)
                    select_obj.select_by_visible_text(test_data[field_key])
                else:
                    # Es un input
                    field.clear()
                    field.send_keys(test_data[field_key])
                
                print(f"‚úÖ {field_key}: {test_data[field_key]}")
                fields_filled += 1
                
            except Exception as e:
                print(f"‚ùå {field_key} fall√≥: {e}")
        
        # 4. Idiomas (checkboxes)
        print(f"\nüìö Seleccionando idiomas...")
        languages_selected = 0
        for language in test_data["languages"]:
            try:
                # Buscar checkbox por valor o texto
                checkbox = driver.find_element(By.XPATH, f"//input[@type='checkbox' and @value='{language}']")
                if not checkbox.is_selected():
                    checkbox.click()
                    languages_selected += 1
                    print(f"‚úÖ Idioma seleccionado: {language}")
            except:
                try:
                    # M√©todo alternativo: buscar por label
                    label = driver.find_element(By.XPATH, f"//label[contains(text(), '{language}')]")
                    label.click()
                    languages_selected += 1
                    print(f"‚úÖ Idioma seleccionado (por label): {language}")
                except Exception as e:
                    print(f"‚ùå Idioma {language} fall√≥: {e}")
        
        print(f"\nüìä Resumen del llenado:")
        print(f"   Campos de texto: {fields_filled}/{total_fields}")
        print(f"   Idiomas: {languages_selected}/{len(test_data['languages'])}")
        
        driver.save_screenshot("reports/screenshots/final_03_form_filled.png")
        
        # === PASO 4: VERIFICAR TOKEN DE AUTENTICACI√ìN ===
        print(f"\nüîë Verificando autenticaci√≥n...")
        token = driver.execute_script("return localStorage.getItem('access_token');")
        if token:
            print(f"‚úÖ Token de autenticaci√≥n encontrado")
        else:
            print(f"‚ö†Ô∏è No se encontr√≥ token de autenticaci√≥n")
        
        # === PASO 5: ENVIAR FORMULARIO ===
        print(f"\nüì§ Paso 5: Enviando formulario...")
        
        # Buscar bot√≥n de env√≠o
        submit_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Crear Convocatoria')]")
        print(f"‚úÖ Bot√≥n encontrado: '{submit_button.text}'")
        
        # Intentar env√≠o con form.submit() (m√©todo que funcion√≥ en debugging)
        try:
            form = driver.find_element(By.TAG_NAME, "form")
            form.submit()
            print(f"‚úÖ Formulario enviado con form.submit()")
        except:
            # Fallback: clic en bot√≥n
            submit_button.click()
            print(f"‚úÖ Formulario enviado con button.click()")
        
        time.sleep(5)  # Esperar procesamiento
        
        final_url = driver.current_url
        print(f"üåê URL despu√©s del env√≠o: {final_url}")
        
        driver.save_screenshot("reports/screenshots/final_04_form_submitted.png")
        
        # === PASO 6: VERIFICAR EN BACKEND ===
        print(f"\nüîç Paso 6: Verificando en backend...")
        
        # Esperar un poco m√°s para asegurar persistencia
        time.sleep(3)
        
        try:
            response = requests.get(custom_config.CONVOCATORIAS_ENDPOINT, timeout=10)
            if response.status_code == 200:
                final_convocatorias = response.json()
                final_count = len(final_convocatorias)
                
                print(f"üìä Estado del backend:")
                print(f"   Inicial: {initial_count} convocatorias")
                print(f"   Final: {final_count} convocatorias")
                print(f"   Diferencia: +{final_count - initial_count}")
                
                # Buscar nuestra convocatoria espec√≠fica
                our_convocatoria = None
                for conv in final_convocatorias:
                    if conv.get('institution') == test_data['institution']:
                        our_convocatoria = conv
                        break
                
                if our_convocatoria:
                    print(f"üéâ ¬°CONVOCATORIA ENCONTRADA EN BACKEND!")
                    print(f"   ID: {our_convocatoria.get('id')}")
                    print(f"   Instituci√≥n: {our_convocatoria.get('institution')}")
                    print(f"   Pa√≠s: {our_convocatoria.get('country')}")
                    print(f"   A√±o: {our_convocatoria.get('subscriptionYear')}")
                    
                    driver.save_screenshot("reports/screenshots/final_05_backend_success.png")
                    
                    print(f"\nüéâ ¬°PRUEBA DE INTEGRACI√ìN EXITOSA!")
                    print(f"‚úÖ Login funcion√≥")
                    print(f"‚úÖ Formulario se llen√≥ completamente")
                    print(f"‚úÖ Datos se persistieron en backend")
                    print(f"‚úÖ Integraci√≥n frontend-backend verificada")
                    
                    return True
                    
                else:
                    print(f"‚ö†Ô∏è Convocatoria no encontrada en backend")
                    if final_count > initial_count:
                        print(f"‚úÖ Pero el contador aument√≥, posiblemente se cre√≥ con otros datos")
                    
                    driver.save_screenshot("reports/screenshots/final_06_partial_success.png")
                    
            else:
                print(f"‚ùå Error consultando backend: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Error verificando backend: {e}")
        
        print(f"\nüìä RESUMEN FINAL:")
        print(f"‚úÖ Login: EXITOSO")
        print(f"‚úÖ Formulario: LLENADO ({fields_filled}/{total_fields} campos)")
        print(f"‚úÖ Env√≠o: EXITOSO")
        print(f"‚ùì Backend: VERIFICACI√ìN PENDIENTE")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error en la prueba: {e}")
        driver.save_screenshot("reports/screenshots/final_99_error.png")
        raise

if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
