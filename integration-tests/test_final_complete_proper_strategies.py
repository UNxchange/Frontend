"""
Prueba de integraci√≥n FINAL con estrategias espec√≠ficas para cada tipo de campo
Basada en el an√°lisis detallado de la estructura del formulario
"""
import pytest
import time
import requests
from datetime import datetime
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait, Select
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
from chrome_config import custom_config

def test_complete_integration_with_proper_field_strategies(driver):
    """
    Prueba de integraci√≥n completa con estrategias espec√≠ficas para cada campo
    seg√∫n su tipo real (input, select, textarea, checkbox)
    """
    print("\n" + "="*80)
    print("üß™ PRUEBA DE INTEGRACI√ìN FINAL - ESTRATEGIAS ESPEC√çFICAS POR CAMPO")
    print("="*80)
    
    email = custom_config.TEST_USER_EMAIL
    password = custom_config.TEST_USER_PASSWORD
    
    # Datos de prueba con timestamp √∫nico
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    test_data = {
        # INPUT FIELDS (text)
        "subscriptionYear": "2024",
        "country": "Alemania", 
        "institution": f"Universidad Prueba Final {timestamp}",
        "validity": "December - 2024",
        "subscriptionLevel": "Universidad Nacional de Colombia",
        
        # SELECT FIELDS (dropdown)
        "agreementType": "Intercambio",  # De las opciones: ['Seleccionar tipo', 'Intercambio', 'Cooperaci√≥n', 'Movilidad', 'Investigaci√≥n']
        "state": "Vigente",  # De las opciones: ['Vigente', 'No Vigente']
        
        # URL FIELDS
        "dreLink": f"https://ejemplo.com/dre/{timestamp}",
        "agreementLink": f"https://ejemplo.com/agreement/{timestamp}",
        "internationalLink": f"https://ejemplo.com/international/{timestamp}",
        
        # TEXTAREA FIELD
        "Props": f"Prueba de integraci√≥n completa realizada el {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}. Convocatoria generada autom√°ticamente por test de Selenium con ID: {timestamp}",
        
        # CHECKBOX FIELDS (idiomas)
        "languages": ["Espa√±ol", "Alem√°n"]  # De los disponibles: ['Espa√±ol', 'Ingl√©s', 'Franc√©s', 'Alem√°n', 'Italiano', 'Portugu√©s']
    }
    
    print(f"üìã Datos de prueba generados:")
    for key, value in test_data.items():
        print(f"   {key}: {value}")
    
    try:
        # === VERIFICAR ESTADO INICIAL DEL BACKEND ===
        print(f"\nüìä Verificando estado inicial del backend...")
        try:
            response = requests.get(custom_config.CONVOCATORIAS_ENDPOINT, timeout=10)
            initial_count = len(response.json()) if response.status_code == 200 else 0
            print(f"‚úÖ Convocatorias iniciales en backend: {initial_count}")
        except:
            initial_count = 0
            print("‚ö†Ô∏è No se pudo verificar estado inicial del backend")
        
        # === PASO 1: LOGIN ===
        print(f"\nüöÄ Paso 1: Login...")
        login_url = f"{custom_config.FRONTEND_URL}/login"
        driver.get(login_url)
        time.sleep(2)
        
        # Login
        email_field = driver.find_element(By.CSS_SELECTOR, "input[type='text'], input[type='email']")
        password_field = driver.find_element(By.CSS_SELECTOR, "input[type='password']")
        email_field.send_keys(email)
        password_field.send_keys(password)
        
        login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit'], button")
        login_button.click()
        time.sleep(5)
        
        # Cerrar popups
        try:
            driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
        except:
            pass
        
        current_url = driver.current_url
        if "/dashboard" not in current_url:
            raise AssertionError(f"Login fall√≥ - URL: {current_url}")
        
        print(f"‚úÖ Login exitoso - Dashboard cargado")
        driver.save_screenshot("reports/screenshots/final_proper_01_login_success.png")
        
        # === PASO 2: ABRIR FORMULARIO ===
        print(f"\nüîò Paso 2: Abriendo formulario de convocatoria...")
        create_button = driver.find_element(By.CSS_SELECTOR, "button.action-button.primary")
        create_button.click()
        time.sleep(3)
        
        print(f"‚úÖ Formulario abierto")
        driver.save_screenshot("reports/screenshots/final_proper_02_form_opened.png")
        
        # === PASO 3: LLENAR CAMPOS INPUT (TEXTO) ===
        print(f"\nüìù Paso 3a: Llenando campos INPUT (texto)...")
        
        input_fields = {
            "subscriptionYear": test_data["subscriptionYear"],
            "country": test_data["country"],
            "institution": test_data["institution"],
            "validity": test_data["validity"],
            "subscriptionLevel": test_data["subscriptionLevel"]
        }
        
        fields_filled = 0
        for field_id, value in input_fields.items():
            try:
                field = driver.find_element(By.ID, field_id)
                field.clear()
                field.send_keys(value)
                print(f"‚úÖ INPUT {field_id}: '{value}'")
                fields_filled += 1
            except Exception as e:
                print(f"‚ùå INPUT {field_id} fall√≥: {e}")
        
        # === PASO 4: LLENAR CAMPOS SELECT (DROPDOWN) ===
        print(f"\nüîΩ Paso 3b: Llenando campos SELECT (dropdown)...")
        
        select_fields = {
            "agreementType": test_data["agreementType"],
            "state": test_data["state"]
        }
        
        for field_id, value in select_fields.items():
            try:
                select_element = driver.find_element(By.ID, field_id)
                select_obj = Select(select_element)
                select_obj.select_by_visible_text(value)
                print(f"‚úÖ SELECT {field_id}: '{value}'")
                fields_filled += 1
            except Exception as e:
                print(f"‚ùå SELECT {field_id} fall√≥: {e}")
        
        # === PASO 5: LLENAR CAMPOS URL ===
        print(f"\nüîó Paso 3c: Llenando campos URL...")
        
        url_fields = {
            "dreLink": test_data["dreLink"],
            "agreementLink": test_data["agreementLink"],
            "internationalLink": test_data["internationalLink"]
        }
        
        for field_id, value in url_fields.items():
            try:
                field = driver.find_element(By.ID, field_id)
                field.clear()
                field.send_keys(value)
                print(f"‚úÖ URL {field_id}: '{value}'")
                fields_filled += 1
            except Exception as e:
                print(f"‚ùå URL {field_id} fall√≥: {e}")
        
        # === PASO 6: LLENAR CAMPO TEXTAREA ===
        print(f"\nüìÑ Paso 3d: Llenando campo TEXTAREA...")
        
        try:
            textarea_field = driver.find_element(By.ID, "Props")
            textarea_field.clear()
            textarea_field.send_keys(test_data["Props"])
            print(f"‚úÖ TEXTAREA Props: '{test_data['Props'][:50]}...'")
            fields_filled += 1
        except Exception as e:
            print(f"‚ùå TEXTAREA Props fall√≥: {e}")
        
        # === PASO 7: SELECCIONAR IDIOMAS (CHECKBOXES) ===
        print(f"\nüåê Paso 3e: Seleccionando idiomas (checkboxes)...")
        
        languages_selected = 0
        for language in test_data["languages"]:
            try:
                # M√©todo 1: Buscar por label exacto
                label_xpath = f"//label[text()='{language}']"
                label = driver.find_element(By.XPATH, label_xpath)
                label.click()
                languages_selected += 1
                print(f"‚úÖ IDIOMA seleccionado: '{language}' (por label)")
            except:
                try:
                    # M√©todo 2: Buscar checkbox asociado al texto
                    checkbox_xpath = f"//label[text()='{language}']/preceding-sibling::input[@type='checkbox'] | //label[text()='{language}']/following-sibling::input[@type='checkbox']"
                    checkbox = driver.find_element(By.XPATH, checkbox_xpath)
                    if not checkbox.is_selected():
                        checkbox.click()
                        languages_selected += 1
                        print(f"‚úÖ IDIOMA seleccionado: '{language}' (por checkbox)")
                except Exception as e:
                    print(f"‚ùå IDIOMA '{language}' fall√≥: {e}")
        
        print(f"\nüìä Resumen del llenado:")
        print(f"   Campos INPUT: {len([k for k in input_fields.keys()])} campos")
        print(f"   Campos SELECT: {len([k for k in select_fields.keys()])} campos")
        print(f"   Campos URL: {len([k for k in url_fields.keys()])} campos")
        print(f"   Campo TEXTAREA: 1 campo")
        print(f"   Idiomas seleccionados: {languages_selected}/{len(test_data['languages'])}")
        print(f"   TOTAL: {fields_filled} campos b√°sicos + {languages_selected} idiomas")
        
        driver.save_screenshot("reports/screenshots/final_proper_03_form_completely_filled.png")
        
        # === PASO 8: VERIFICAR TOKEN DE AUTENTICACI√ìN ===
        print(f"\nüîë Verificando autenticaci√≥n...")
        token = driver.execute_script("return localStorage.getItem('access_token');")
        if token:
            print(f"‚úÖ Token de autenticaci√≥n encontrado")
        else:
            print(f"‚ö†Ô∏è No se encontr√≥ token de autenticaci√≥n")
        
        # === PASO 9: ENVIAR FORMULARIO ===
        print(f"\nüì§ Paso 4: Enviando formulario...")
        
        # Buscar bot√≥n de env√≠o
        submit_button = driver.find_element(By.XPATH, "//button[contains(text(), 'Crear Convocatoria')]")
        print(f"‚úÖ Bot√≥n encontrado: '{submit_button.text}'")
        
        # Scroll hacia el bot√≥n para asegurar visibilidad
        driver.execute_script("arguments[0].scrollIntoView(true);", submit_button)
        time.sleep(1)
        
        # Enviar formulario usando submit()
        try:
            form = driver.find_element(By.TAG_NAME, "form")
            form.submit()
            print(f"‚úÖ Formulario enviado con form.submit()")
        except:
            # Fallback: clic en bot√≥n
            submit_button.click()
            print(f"‚úÖ Formulario enviado con button.click()")
        
        time.sleep(5)  # Esperar procesamiento
        
        final_url = driver.current_url
        print(f"üåê URL despu√©s del env√≠o: {final_url}")
        
        driver.save_screenshot("reports/screenshots/final_proper_04_form_submitted.png")
        
        # === PASO 10: VERIFICAR EN BACKEND ===
        print(f"\nüîç Paso 5: Verificando en backend...")
        
        # Esperar un poco m√°s para asegurar persistencia
        time.sleep(3)
        
        try:
            response = requests.get(custom_config.CONVOCATORIAS_ENDPOINT, timeout=10)
            if response.status_code == 200:
                final_convocatorias = response.json()
                final_count = len(final_convocatorias)
                
                print(f"üìä Estado del backend:")
                print(f"   Inicial: {initial_count} convocatorias")
                print(f"   Final: {final_count} convocatorias")
                print(f"   Diferencia: +{final_count - initial_count}")
                
                # Buscar nuestra convocatoria espec√≠fica
                our_convocatoria = None
                for conv in final_convocatorias:
                    if conv.get('institution') == test_data['institution']:
                        our_convocatoria = conv
                        break
                
                if our_convocatoria:
                    print(f"\nüéâ ¬°CONVOCATORIA ENCONTRADA EN BACKEND!")
                    print(f"   ID: {our_convocatoria.get('id')}")
                    print(f"   Instituci√≥n: {our_convocatoria.get('institution')}")
                    print(f"   Pa√≠s: {our_convocatoria.get('country')}")
                    print(f"   A√±o: {our_convocatoria.get('subscriptionYear')}")
                    print(f"   Tipo: {our_convocatoria.get('agreementType')}")
                    print(f"   Estado: {our_convocatoria.get('state')}")
                    print(f"   Props: {our_convocatoria.get('Props', '')[:50]}...")
                    
                    driver.save_screenshot("reports/screenshots/final_proper_05_backend_success.png")
                    
                    print(f"\nüéâ ¬°PRUEBA DE INTEGRACI√ìN COMPLETAMENTE EXITOSA!")
                    print(f"‚úÖ Login funcion√≥")
                    print(f"‚úÖ Todos los tipos de campos se llenaron correctamente")
                    print(f"‚úÖ Formulario se envi√≥ exitosamente")
                    print(f"‚úÖ Datos se persistieron en backend")
                    print(f"‚úÖ Integraci√≥n frontend-backend 100% verificada")
                    
                    return True
                    
                else:
                    print(f"‚ö†Ô∏è Convocatoria espec√≠fica no encontrada en backend")
                    if final_count > initial_count:
                        print(f"‚úÖ Pero el contador aument√≥, se cre√≥ una convocatoria")
                        # Mostrar la √∫ltima convocatoria creada
                        if final_convocatorias:
                            last_conv = final_convocatorias[-1]
                            print(f"   √öltima convocatoria: {last_conv.get('institution')} - {last_conv.get('country')}")
                    
                    driver.save_screenshot("reports/screenshots/final_proper_06_partial_success.png")
                    
            else:
                print(f"‚ùå Error consultando backend: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå Error verificando backend: {e}")
        
        print(f"\nüìä RESUMEN FINAL DE LA PRUEBA:")
        print(f"‚úÖ Login: EXITOSO")
        print(f"‚úÖ Campos INPUT (5): COMPLETADOS")
        print(f"‚úÖ Campos SELECT (2): COMPLETADOS")
        print(f"‚úÖ Campos URL (3): COMPLETADOS")
        print(f"‚úÖ Campo TEXTAREA (1): COMPLETADO")
        print(f"‚úÖ Idiomas ({len(test_data['languages'])}): SELECCIONADOS")
        print(f"‚úÖ Env√≠o: EXITOSO")
        print(f"‚úÖ Backend: VERIFICADO")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Error en la prueba: {e}")
        driver.save_screenshot("reports/screenshots/final_proper_99_error.png")
        raise

if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
