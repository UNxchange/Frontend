"""
Prueba de integraci√≥n robusta que maneja popups de Chrome
"""
import pytest
import time
import requests
from datetime import datetime
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.common.keys import Keys
from chrome_config import custom_config

def close_chrome_popups(driver):
    """
    Cierra popups comunes de Chrome que pueden interferir con las pruebas
    """
    print("üîç Verificando y cerrando popups de Chrome...")
    
    # Lista de selectores para cerrar popups
    popup_close_selectors = [
        # Popup de contrase√±as
        "button[aria-label='Cerrar']",
        "button[aria-label='Close']", 
        "button[aria-label='Dismiss']",
        "button[data-testid='close-button']",
        ".close-button",
        ".dismiss-button",
        "[role='button'][aria-label*='Close']",
        "[role='button'][aria-label*='Cerrar']",
        # Botones gen√©ricos de cerrar
        "button:contains('Cerrar')",
        "button:contains('Close')",
        "button:contains('Dismiss')",
        "button:contains('No gracias')",
        "button:contains('No thanks')",
        # Selectores espec√≠ficos de Chrome
        ".infobar button",
        "#password-manager-dialog button",
        ".password-manager-popup button"
    ]
    
    popups_closed = 0
    
    for selector in popup_close_selectors:
        try:
            if ":contains(" in selector:
                # Usar XPath para texto
                text = selector.split(":contains('")[1].split("')")[0]
                elements = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}')]")
            else:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
            
            for element in elements:
                if element.is_displayed() and element.is_enabled():
                    try:
                        element.click()
                        popups_closed += 1
                        print(f"‚úÖ Popup cerrado con selector: {selector}")
                        time.sleep(0.5)  # Peque√±a pausa
                    except:
                        continue
        except:
            continue
    
    # Intentar presionar ESC para cerrar popups
    try:
        driver.find_element(By.TAG_NAME, "body").send_keys(Keys.ESCAPE)
        time.sleep(0.5)
    except:
        pass
    
    if popups_closed > 0:
        print(f"‚úÖ Se cerraron {popups_closed} popups")
    else:
        print("‚ÑπÔ∏è No se encontraron popups para cerrar")
    
    return popups_closed

def test_complete_flow_with_popup_handling(driver):
    """
    Prueba completa del flujo de creaci√≥n de convocatorias con manejo de popups
    """
    print("\n" + "="*70)
    print("üß™ PRUEBA COMPLETA CON MANEJO DE POPUPS DE CHROME")
    print("="*70)
    
    # Credenciales
    email = custom_config.TEST_USER_EMAIL
    password = custom_config.TEST_USER_PASSWORD
    
    print(f"üìß Email: {email}")
    print(f"üîê Password: {password}")
    print(f"üåê Frontend: {custom_config.FRONTEND_URL}")
    
    try:
        # === PASO 1: NAVEGACI√ìN AL LOGIN ===
        print(f"\nüöÄ Paso 1: Navegando al login...")
        login_url = f"{custom_config.FRONTEND_URL}/login"
        driver.get(login_url)
        
        # Esperar carga
        time.sleep(3)
        driver.save_screenshot("reports/screenshots/01_login_page.png")
        print(f"üì∏ Screenshot: 01_login_page.png")
        print(f"üåê URL: {driver.current_url}")
        
        # === PASO 2: LOGIN ===
        print(f"\nüìù Paso 2: Realizando login...")
        
        # Buscar campos
        email_field = driver.find_element(By.CSS_SELECTOR, "input[type='text'], input[type='email']")
        password_field = driver.find_element(By.CSS_SELECTOR, "input[type='password']")
        
        # Llenar campos
        email_field.clear()
        email_field.send_keys(email)
        password_field.clear() 
        password_field.send_keys(password)
        
        driver.save_screenshot("reports/screenshots/02_fields_filled.png")
        print(f"üì∏ Screenshot: 02_fields_filled.png")
        
        # Hacer login
        login_button = driver.find_element(By.CSS_SELECTOR, "button[type='submit'], button")
        login_button.click()
        
        print(f"‚úÖ Login enviado")
        
        # === PASO 3: MANEJAR POPUPS DESPU√âS DEL LOGIN ===
        print(f"\nüîÑ Paso 3: Esperando redirecci√≥n y manejando popups...")
        
        # Esperar un poco para que se procese el login
        time.sleep(5)
        
        # Cerrar popups de Chrome
        close_chrome_popups(driver)
        
        # Tomar screenshot despu√©s de cerrar popups
        driver.save_screenshot("reports/screenshots/03_after_popup_handling.png")
        print(f"üì∏ Screenshot: 03_after_popup_handling.png")
        
        current_url = driver.current_url
        print(f"üåê URL despu√©s del login: {current_url}")
        
        # Verificar redirecci√≥n al dashboard
        max_retries = 3
        for retry in range(max_retries):
            if "/dashboard" in current_url:
                print(f"‚úÖ Redirigido al dashboard (intento {retry + 1})")
                break
            else:
                print(f"‚è≥ Esperando redirecci√≥n... (intento {retry + 1})")
                time.sleep(3)
                close_chrome_popups(driver)  # Cerrar popups nuevamente
                current_url = driver.current_url
        
        if "/dashboard" not in current_url:
            driver.save_screenshot("reports/screenshots/04_login_failed.png")
            raise AssertionError(f"Login fall√≥ - URL actual: {current_url}")
        
        # === PASO 4: BUSCAR BOT√ìN "CREAR NUEVA CONVOCATORIA" ===
        print(f"\nüîò Paso 4: Buscando bot√≥n 'Crear Nueva Convocatoria'...")
        
        # Cerrar popups una vez m√°s antes de buscar el bot√≥n
        close_chrome_popups(driver)
        
        # Esperar a que la p√°gina se estabilice
        time.sleep(2)
        
        # Buscar el bot√≥n con los selectores espec√≠ficos basados en la estructura HTML
        create_button_selectors = [
            # Selector espec√≠fico para el bot√≥n con la estructura exacta
            "button.action-button.primary",
            "button.action-button",
            "button[class*='action-button'][class*='primary']",
            "button:has(span:contains('Crear Nueva Convocatoria'))",
            "button:has(.fas.fa-plus)",
            # Selectores m√°s espec√≠ficos
            "button.action-button.primary span:contains('Crear Nueva Convocatoria')",
            "button[class='action-button primary']",
            # Selectores de respaldo
            "button:contains('Crear Nueva Convocatoria')",
            "button:contains('Crear Convocatoria')", 
            "button:contains('Nueva Convocatoria')",
            "[data-testid*='create']",
            "[data-testid*='nueva']",
            "button[class*='create']",
            "button[class*='primary']"
        ]
        
        create_button = None
        
        print("üîç Buscando con selectores espec√≠ficos...")
        
        for selector in create_button_selectors:
            try:
                if ":contains(" in selector and not ":has(" in selector:
                    # Usar XPath para texto simple
                    text = selector.split(":contains('")[1].split("')")[0]
                    buttons = driver.find_elements(By.XPATH, f"//button[contains(text(), '{text}') or .//span[contains(text(), '{text}')]]")
                    for btn in buttons:
                        if btn.is_displayed() and btn.is_enabled():
                            create_button = btn
                            print(f"‚úÖ Bot√≥n encontrado con XPath para texto: '{text}'")
                            break
                elif ":has(" in selector:
                    # Selectores CSS complejos, convertir a XPath
                    if "span:contains('Crear Nueva Convocatoria')" in selector:
                        create_button = driver.find_element(By.XPATH, "//button[contains(@class, 'action-button') and contains(@class, 'primary')]//span[contains(text(), 'Crear Nueva Convocatoria')]/ancestor::button")
                        if create_button.is_displayed():
                            print(f"‚úÖ Bot√≥n encontrado con XPath espec√≠fico")
                            break
                    elif ".fas.fa-plus" in selector:
                        create_button = driver.find_element(By.XPATH, "//button[contains(@class, 'action-button')]//i[contains(@class, 'fas') and contains(@class, 'fa-plus')]/ancestor::button")
                        if create_button.is_displayed():
                            print(f"‚úÖ Bot√≥n encontrado por √≠cono fa-plus")
                            break
                else:
                    # Selector CSS normal
                    buttons = driver.find_elements(By.CSS_SELECTOR, selector)
                    for btn in buttons:
                        if btn.is_displayed() and btn.is_enabled():
                            create_button = btn
                            print(f"‚úÖ Bot√≥n encontrado con selector CSS: {selector}")
                            break
                
                if create_button:
                    break
                    
            except NoSuchElementException:
                continue
            except Exception as e:
                print(f"‚ö†Ô∏è Error con selector {selector}: {e}")
                continue
        
        if not create_button:
            # Listar todos los botones disponibles para debugging
            print("üîç Buscando TODOS los botones disponibles...")
            buttons = driver.find_elements(By.TAG_NAME, "button")
            print(f"üìã Botones disponibles en el dashboard ({len(buttons)}):")
            
            for i, btn in enumerate(buttons):
                if btn.is_displayed():
                    btn_text = btn.text.strip()
                    btn_class = btn.get_attribute('class')
                    btn_html = btn.get_attribute('outerHTML')[:200] + "..." if len(btn.get_attribute('outerHTML')) > 200 else btn.get_attribute('outerHTML')
                    print(f"   {i+1}. Texto: '{btn_text}' | Class: '{btn_class}'")
                    print(f"       HTML: {btn_html}")
                    print("       ---")
                    
                    # Si encontramos un bot√≥n que contenga las palabras clave, usarlo
                    if any(keyword in btn_text.lower() for keyword in ['crear', 'nueva', 'convocatoria']) or 'action-button' in btn_class:
                        create_button = btn
                        print(f"‚úÖ ¬°Bot√≥n candidato encontrado! Usando bot√≥n #{i+1}")
                        break
            
            if not create_button:
                driver.save_screenshot("reports/screenshots/05_no_create_button.png")
                raise AssertionError("No se encontr√≥ el bot√≥n 'Crear Nueva Convocatoria'")
        
        # Mostrar informaci√≥n del bot√≥n encontrado
        print(f"üìã Informaci√≥n del bot√≥n encontrado:")
        print(f"   Texto: '{create_button.text}'")
        print(f"   Class: '{create_button.get_attribute('class')}'")
        print(f"   Visible: {create_button.is_displayed()}")
        print(f"   Habilitado: {create_button.is_enabled()}")
        
        # === PASO 5: HACER CLIC EN CREAR CONVOCATORIA ===
        print(f"\nüñ±Ô∏è Paso 5: Haciendo clic en 'Crear Nueva Convocatoria'...")
        
        # Scroll hacia el bot√≥n si es necesario
        driver.execute_script("arguments[0].scrollIntoView({behavior: 'smooth', block: 'center'});", create_button)
        time.sleep(1)
        
        # Cerrar popups una vez m√°s antes del clic
        close_chrome_popups(driver)
        
        # Asegurar que el bot√≥n est√© en el viewport y sea clickeable
        try:
            # M√©todo 1: Clic normal
            print("üñ±Ô∏è Intentando clic normal...")
            create_button.click()
            print(f"‚úÖ Clic normal exitoso en: '{create_button.text}'")
        except Exception as e:
            print(f"‚ö†Ô∏è Clic normal fall√≥: {e}")
            try:
                # M√©todo 2: Clic con JavaScript
                print("üñ±Ô∏è Intentando clic con JavaScript...")
                driver.execute_script("arguments[0].click();", create_button)
                print(f"‚úÖ Clic con JavaScript exitoso")
            except Exception as e2:
                print(f"‚ö†Ô∏è Clic con JavaScript fall√≥: {e2}")
                try:
                    # M√©todo 3: Clic en el span interno
                    print("üñ±Ô∏è Intentando clic en span interno...")
                    span_element = create_button.find_element(By.TAG_NAME, "span")
                    span_element.click()
                    print(f"‚úÖ Clic en span exitoso")
                except Exception as e3:
                    print(f"‚ùå Todos los m√©todos de clic fallaron: {e3}")
                    raise e3
        
        # Esperar a que aparezca el formulario
        print("‚è≥ Esperando respuesta despu√©s del clic...")
        time.sleep(4)
        
        # Cerrar popups despu√©s del clic
        close_chrome_popups(driver)
        
        driver.save_screenshot("reports/screenshots/06_after_create_click.png")
        print(f"üì∏ Screenshot: 06_after_create_click.png")
        
        # Verificar cambios en la p√°gina
        new_url = driver.current_url
        print(f"üåê URL despu√©s del clic: {new_url}")
        
        # Verificar si la p√°gina cambi√≥ o apareci√≥ contenido nuevo
        page_source_after = driver.page_source
        if "form" in page_source_after.lower() or "input" in page_source_after.lower():
            print("‚úÖ Se detect√≥ nuevo contenido (formulario) en la p√°gina")
        else:
            print("‚ö†Ô∏è No se detect√≥ cambio significativo en la p√°gina")
        
        # === PASO 6: VERIFICAR FORMULARIO ===
        print(f"\nüìã Paso 6: Verificando que el formulario aparezca...")
        
        # Buscar elementos del formulario
        form_selectors = [
            "form",
            "input[type='text']",
            "select",
            ".form",
            "[class*='form']"
        ]
        
        form_found = False
        for selector in form_selectors:
            try:
                elements = driver.find_elements(By.CSS_SELECTOR, selector)
                if elements:
                    print(f"‚úÖ Formulario encontrado con selector: {selector} ({len(elements)} elementos)")
                    form_found = True
                    break
            except:
                continue
        
        if form_found:
            print(f"üéâ ¬°Formulario de convocatoria cargado exitosamente!")
            driver.save_screenshot("reports/screenshots/07_form_loaded.png")
            print(f"üì∏ Screenshot: 07_form_loaded.png")
        else:
            driver.save_screenshot("reports/screenshots/08_no_form.png")
            print(f"‚ùå No se pudo cargar el formulario")
            
        print(f"\nüèÅ Prueba completada - Estado: {'√âXITO' if form_found else 'FALL√ì'}")
        
        return form_found
        
    except Exception as e:
        print(f"\n‚ùå Error durante la prueba: {e}")
        driver.save_screenshot("reports/screenshots/99_error.png")
        raise

if __name__ == "__main__":
    pytest.main([__file__, "-v", "-s"])
