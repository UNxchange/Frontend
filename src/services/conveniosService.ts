interface ApiFilters {
  q?: string
  country?: string
  language?: string
  state?: string
  agreement_type?: string
  subscription_level?: string
  validity?: string
  subscription_year?: string
  institution?: string
  limit?: number
  skip?: number
}

export interface ConveniosResponse {
  data: UniversidadApi[]
  total: number
  page: number
  totalPages: number
}

export interface UniversidadApi {
  id?: number | string
  _id?: string | { $oid: string }
  // Campos en espa√±ol (del API)
  universidad?: string
  paisUniversidad?: string
  ciudad?: string
  estado?: string
  vigencia?: string
  duracion?: string
  fechaFirma?: string
  tipoAcuerdo?: string
  idiomas?: string
  a√±oSuscripcion?: string
  nivelSuscripcion?: string
  descripcion?: string
  enlaceDre?: string
  enlaceAcuerdo?: string
  enlaceInternacional?: string
  cuposDisponibles?: string
  properties?: any
  // Campos en ingl√©s (formato esperado)
  institution: string
  country: string
  city?: string
  agreementType: string
  validity?: string
  state: 'vigente' | 'no-vigente' | 'pendiente'
  languages?: string | string[]
  subscriptionYear?: string
  subscriptionLevel?: string
  description?: string
  dreLink?: string
  agreementLink?: string
  internationalLink?: string
  availableSlots?: string
  duration?: string
}

import { HttpClient } from '../utils/httpClient'
import { API_CONFIG, APP_CONFIG } from '../config/api'
import { AuthService } from './authService'

// Specialized HTTP client for convocatorias (local backend)
class ConvocatoriasHttpClient {
  private static baseURL = API_CONFIG.CONVOCATORIAS_BASE_URL

  static async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.baseURL}${endpoint}`
    
    // Agregar headers por defecto
    const defaultHeaders: HeadersInit = {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    }

    // Agregar token de autenticaci√≥n
    const token = AuthService.getToken()
    if (token) {
      defaultHeaders['Authorization'] = `Bearer ${token}`
    }

    // Combinar headers
    const headers = {
      ...defaultHeaders,
      ...options.headers,
    }

    try {
      console.log(`Making request to: ${url}`)
      console.log('Headers:', headers)
      
      const response = await fetch(url, {
        ...options,
        headers,
      })

      console.log(`Response status: ${response.status}`)

      if (!response.ok) {
        // Obtener el mensaje de error del servidor si es posible
        let errorMessage = `HTTP error! status: ${response.status}`
        let errorData = null
        
        try {
          const contentType = response.headers.get('content-type')
          if (contentType && contentType.includes('application/json')) {
            errorData = await response.json()
            if (errorData.detail) {
              errorMessage = errorData.detail
            }
          } else {
            const textResponse = await response.text()
            errorMessage = textResponse || errorMessage
          }
        } catch (parseError) {
          console.warn('Could not parse error response:', parseError)
        }

        // Manejo espec√≠fico de errores de autenticaci√≥n
        if (response.status === 401) {
          console.error('üîê Error de autenticaci√≥n en convocatorias:', errorMessage)
          console.error('üîß El servidor local necesita validar tokens de:', API_CONFIG.AUTH_BASE_URL || API_CONFIG.BASE_URL)
          console.error('üí° Configura tu servidor local para hacer requests a /api/v1/auth/me del servicio de Heroku')
          
          // Solo deslogear si es un error real de token expirado
          if (typeof errorMessage === 'string' && errorMessage.includes('Not authenticated')) {
            console.warn('‚ö†Ô∏è Deslogueando debido a token inv√°lido...')
            AuthService.logout()
            window.location.href = APP_CONFIG.LOGIN_PATH
            throw new Error('Tu servidor local de convocatorias no puede validar el token de Heroku. Contacta al administrador.')
          }
        }

        if (response.status === 403) {
          console.error('üö´ Acceso denegado a convocatorias:', errorMessage)
          throw new Error('Acceso denegado. Tu token puede no tener permisos para convocatorias.')
        }

        throw new Error(errorMessage)
      }

      const data = await response.json()
      console.log('Response data:', data)
      return data
    } catch (error) {
      console.error('Request error:', error)
      
      // Si es un error de red, no redirigir autom√°ticamente
      if (error instanceof TypeError && error.message.includes('fetch')) {
        throw new Error('No se pudo conectar al servicio de convocatorias. Verifique que est√© funcionando en http://127.0.0.1:8000')
      }
      throw error
    }
  }
}

class ConveniosService {
  // M√©todo de diagn√≥stico para verificar la conectividad
  async checkConvocatoriasService(): Promise<{ status: string, url: string, message: string }> {
    const url = `${API_CONFIG.CONVOCATORIAS_BASE_URL}/convocatorias/?limit=1`
    
    try {
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Accept': 'application/json'
        }
      })

      return {
        status: response.ok ? 'success' : 'error',
        url,
        message: response.ok 
          ? 'Servicio de convocatorias disponible' 
          : `Error ${response.status}: ${response.statusText}`
      }
    } catch (error) {
      return {
        status: 'error',
        url,
        message: `No se pudo conectar al servicio: ${error instanceof Error ? error.message : 'Error desconocido'}`
      }
    }
  }

  async fetchConvenios(filters: ApiFilters = {}): Promise<ConveniosResponse> {
    try {
      // Primero verificar si el servicio est√° disponible
      const serviceCheck = await this.checkConvocatoriasService()
      if (serviceCheck.status === 'error') {
        console.warn('Convocatorias service check failed:', serviceCheck.message)
        // No deslogear, solo mostrar error espec√≠fico
        throw new Error(`Servicio no disponible: ${serviceCheck.message}`)
      }

      const params = new URLSearchParams()
      
      // Extraer valores para c√°lculos internos (sin forzar valores por defecto en la request)
      const limit = filters.limit || 10
      const skip = filters.skip || 0
      
      // Solo enviar par√°metros que tengan valores, sin forzar valores por defecto
      Object.entries(filters).forEach(([key, value]) => {
        if (value !== undefined && value !== null && value !== '' && value !== 0) {
          params.append(key, value.toString())
        }
      })

      console.log('Fetching convocatorias from:', `${API_CONFIG.CONVOCATORIAS_BASE_URL}${API_CONFIG.ENDPOINTS.CONVOCATORIAS.LIST}?${params.toString()}`)
      
      const data = await ConvocatoriasHttpClient.request<any>(`${API_CONFIG.ENDPOINTS.CONVOCATORIAS.LIST}?${params.toString()}`, {
        method: 'GET'
      })
      
      // CASO 1: La API ya devuelve datos paginados (formato esperado: {data, total, page, totalPages})
      if (data.data && typeof data.total === 'number') {
        const mappedData = this.mapApiDataToFrontendFormat(data.data)
        return {
          data: mappedData,
          total: data.total,
          page: data.page || Math.floor(skip / limit) + 1,
          totalPages: data.totalPages || Math.ceil(data.total / limit)
        }
      }
      
      // CASO 2: La API devuelve un array (aplicar paginaci√≥n en frontend)
      if (Array.isArray(data)) {
        const mappedData = this.mapApiDataToFrontendFormat(data)
        
        // Aplicar paginaci√≥n en frontend ya que el servidor no la maneja
        const total = mappedData.length
        const totalPages = Math.ceil(total / limit)
        const page = Math.floor(skip / limit) + 1
        
        const startIndex = skip
        const endIndex = skip + limit
        const paginatedData = mappedData.slice(startIndex, endIndex)
        
        return {
          data: paginatedData,
          total,
          page,
          totalPages
        }
      }
      
      // CASO 3: Formato desconocido
      throw new Error('Formato de respuesta de la API no reconocido')
      
    } catch (error) {
      console.error('Error fetching convenios:', error)
      throw error
    }
  }

  /**
   * Mapea los datos de la API al formato esperado por el frontend
   */
  private mapApiDataToFrontendFormat(data: any[]): UniversidadApi[] {
    return data.map(item => {
      // Extraer el ID del objeto MongoDB
      let id = item.id || item._id
      if (typeof id === 'object' && id?.$oid) {
        id = id.$oid
      }
      
      // Mapear el estado correctamente
      let state: 'vigente' | 'no-vigente' | 'pendiente' = 'vigente'
      if (item.estado) {
        const estadoLower = item.estado.toLowerCase()
        if (estadoLower.includes('vigente')) {
          state = 'vigente'
        } else if (estadoLower.includes('no vigente') || estadoLower.includes('no-vigente')) {
          state = 'no-vigente'
        } else if (estadoLower.includes('pendiente')) {
          state = 'pendiente'
        }
      }
      
      // Extraer informaci√≥n de properties si existe
      const properties = item.properties || {}
      const agreementType = properties['Tipo de acuerdo'] || item.agreementType || item.tipoAcuerdo || 'Acuerdo general'
      const city = properties['Ciudad'] || item.city || item.ciudad || ''
      
      return {
        id,
        institution: item.universidad || item.institution || 'Sin nombre',
        country: item.paisUniversidad || item.country || item.pais || 'Sin pa√≠s',
        city,
        agreementType,
        validity: item.vigencia || item.validity || '',
        state,
        languages: Array.isArray(item.languages) ? item.languages : 
                   (item.languages || item.idiomas ? 
                    (item.languages || item.idiomas).split(',').map((lang: string) => lang.trim()).filter(Boolean) : 
                    []),
        subscriptionYear: item.subscriptionYear || item.a√±oSuscripcion || '',
        subscriptionLevel: item.subscriptionLevel || item.nivelSuscripcion || '',
        description: typeof properties === 'object' ? JSON.stringify(properties) : (item.description || item.descripcion || ''),
        dreLink: item.dreLink || item.enlaceDre || '',
        agreementLink: item.agreementLink || item.enlaceAcuerdo || '',
        internationalLink: item.internationalLink || item.enlaceInternacional || '',
        duration: item.duracion || item.duration || '',
        availableSlots: item.availableSlots || item.cuposDisponibles || ''
      }
    })
  }

  async updateConvenio(id: string | number, updateData: Partial<UniversidadApi>): Promise<UniversidadApi> {
    try {
      const response = await ConvocatoriasHttpClient.request<UniversidadApi>(API_CONFIG.ENDPOINTS.CONVOCATORIAS.UPDATE(id), {
        method: 'PATCH',
        body: JSON.stringify(updateData)
      })

      return response
    } catch (error) {
      console.error('Error updating convenio:', error)
      throw error
    }
  }

  async deleteConvenio(id: string | number): Promise<void> {
    try {
      await ConvocatoriasHttpClient.request<void>(API_CONFIG.ENDPOINTS.CONVOCATORIAS.DELETE(id), {
        method: 'DELETE'
      })
    } catch (error) {
      console.error('Error deleting convenio:', error)
      throw error
    }
  }


  getFilterOptions() {
    return {
      countries: [
        "Argentina", "Australia", "Austria", "B√©lgica", "Brasil", "Bulgaria", 
        "Canad√°", "Chile", "China", "Colombia", "Corea del Sur", "Costa Rica", 
        "Dinamarca", "Ecuador", "Espa√±a", "Estados Unidos", "Finlandia", 
        "Francia", "Alemania", "Grecia", "M√©xico", "Pa√≠ses Bajos", "Portugal", 
        "Reino Unido", "Suecia", "Suiza"
      ],
      languages: ["Espa√±ol", "Ingl√©s", "Franc√©s", "Portugu√©s", "Alem√°n", "Italiano", "Mandar√≠n", "Japon√©s", "Coreano"],
      states: ["vigente", "no-vigente", "pendiente"],
      agreementTypes: [
        "Intercambio Estudiantil", 
        "Investigaci√≥n", 
        "Intercambio Acad√©mico", 
        "Doble Titulaci√≥n", 
        "Marco", 
        "Espec√≠fico",
        "Marco+Intercambio",
        "Cooperaci√≥n Acad√©mica",
        "Intercambio Docente",
        "Pr√°cticas Profesionales"
      ],
      subscriptionLevels: [
        "Facultad de Ciencias Humanas", 
        "Facultad de Ingenier√≠a", 
        "Facultad de Ciencias", 
        "Facultad de Medicina",
        "Facultad de Artes",
        "Facultad de Derecho",
        "Facultad de Econom√≠a",
        "Facultad de Educaci√≥n",
        "Facultad de Ciencias Sociales",
        "Universidad Nacional de Colombia",
        "Institucional"
      ],
      validityOptions: [
        "Indefinido",
        "5 a√±os",
        "10 a√±os",
        "3 a√±os",
        "Por definir"
      ],
      subscriptionYears: [
        "2024", "2023", "2022", "2021", "2020", "2019", "2018", "2017", 
        "2016", "2015", "2014", "2013", "2012", "2011", "2010"
      ]
    }
  }

  // M√©todo para obtener estad√≠sticas de paginaci√≥n
  getPaginationInfo(currentPage: number, limit: number, total: number) {
    const totalPages = Math.ceil(total / limit)
    const startItem = ((currentPage - 1) * limit) + 1
    const endItem = Math.min(currentPage * limit, total)
    
    return {
      currentPage,
      totalPages,
      total,
      startItem,
      endItem,
      hasNextPage: currentPage < totalPages,
      hasPrevPage: currentPage > 1,
      limit
    }
  }

  // M√©todo para construir URLs de paginaci√≥n
  buildPaginationUrl(baseFilters: ApiFilters, page: number, limit: number = 20): ApiFilters {
    return {
      ...baseFilters,
      limit,
      skip: (page - 1) * limit
    }
  }

  // M√©todo de diagn√≥stico completo
  async runDiagnostics(): Promise<void> {
    console.log('üîç Ejecutando diagn√≥sticos...')
    
    // 1. Verificar token
    const token = AuthService.getToken()
    console.log('üîê Token presente:', !!token)
    if (token) {
      console.log('üîê Token (primeros 20 chars):', token.substring(0, 20) + '...')
    }
    
    // 2. Verificar configuraci√≥n
    console.log('‚öôÔ∏è Auth URL:', API_CONFIG.AUTH_BASE_URL || API_CONFIG.BASE_URL)
    console.log('‚öôÔ∏è Convocatorias URL:', API_CONFIG.CONVOCATORIAS_BASE_URL)
    
    // 3. Verificar servicio de convocatorias
    console.log('üåê Verificando servicio de convocatorias...')
    const serviceCheck = await this.checkConvocatoriasService()
    console.log('üåê Estado del servicio:', serviceCheck)
    
    // 4. Intentar una petici√≥n simple
    if (serviceCheck.status === 'success') {
      console.log('üìã Intentando obtener convocatorias...')
      try {
        const result = await this.fetchConvenios({ limit: 1 })
        console.log('‚úÖ Convocatorias obtenidas exitosamente:', result.total, 'total')
      } catch (error) {
        console.log('‚ùå Error obteniendo convocatorias:', error)
      }
    }
  }
}

export default new ConveniosService()
